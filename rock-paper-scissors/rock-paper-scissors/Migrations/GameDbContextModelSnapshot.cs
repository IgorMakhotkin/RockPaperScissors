// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RockPaperScissors.Db;

#nullable disable

namespace RockPaperScissors.Migrations
{
    [DbContext(typeof(GameDbContext))]
    partial class GameDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RockPaperScissors.Model.Entity.GameTransaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.HasKey("TransactionId");

                    b.HasIndex("GameId");

                    b.HasIndex("ToUserId");

                    b.HasIndex("FromUserId", "ToUserId");

                    b.ToTable("GameTransactions", (string)null);
                });

            modelBuilder.Entity("RockPaperScissors.Model.Entity.MatchHistory", b =>
                {
                    b.Property<Guid>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AmountBet")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PlayerOneId")
                        .HasColumnType("uuid");

                    b.Property<string>("PlayerOneMove")
                        .HasColumnType("text");

                    b.Property<Guid?>("PlayerTwoId")
                        .HasColumnType("uuid");

                    b.Property<string>("PlayerTwoMove")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("MatchId");

                    b.HasIndex("PlayerOneId");

                    b.HasIndex("PlayerTwoId");

                    b.ToTable("MatchHistory", (string)null);
                });

            modelBuilder.Entity("RockPaperScissors.Model.Entity.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("RockPaperScissors.Model.Matches.Match", b =>
                {
                    b.Property<Guid>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("MatchBet")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("MatchId");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.ToTable("Matches", (string)null);
                });

            modelBuilder.Entity("RockPaperScissors.Model.Entity.GameTransaction", b =>
                {
                    b.HasOne("RockPaperScissors.Model.Entity.User", "Sender")
                        .WithMany("GameTransactionsSent")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RockPaperScissors.Model.Entity.MatchHistory", "Match")
                        .WithMany("Transactions")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RockPaperScissors.Model.Entity.User", "Receiver")
                        .WithMany("GameTransactionsReceived")
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("RockPaperScissors.Model.Entity.MatchHistory", b =>
                {
                    b.HasOne("RockPaperScissors.Model.Entity.User", "PlayerOne")
                        .WithMany()
                        .HasForeignKey("PlayerOneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RockPaperScissors.Model.Entity.User", "PlayerTwo")
                        .WithMany()
                        .HasForeignKey("PlayerTwoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PlayerOne");

                    b.Navigation("PlayerTwo");
                });

            modelBuilder.Entity("RockPaperScissors.Model.Entity.MatchHistory", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("RockPaperScissors.Model.Entity.User", b =>
                {
                    b.Navigation("GameTransactionsReceived");

                    b.Navigation("GameTransactionsSent");
                });
#pragma warning restore 612, 618
        }
    }
}
